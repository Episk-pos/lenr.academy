name: Deploy to Production

on:
  release:
    types: [released]
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy to AWS S3 + CloudFront
    runs-on: ubuntu-latest

    # Deploy only when:
    # 1. 'released' event fires (when pre-release is unchecked and becomes full release)
    # 2. Manual workflow dispatch
    if: |
      (github.event_name == 'release' &&
       github.event.release.prerelease == false) ||
      github.event_name == 'workflow_dispatch'

    permissions:
      contents: write  # Needed to upload release assets


    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || github.ref }}
          lfs: true
          fetch-depth: 0  # Fetch all history for git describe
          fetch-tags: true  # Fetch tags for version detection

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build production bundle
        env:
          VITE_SENTRY_DSN: ${{ secrets.VITE_SENTRY_DSN }}
          SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
          SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
          SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
        run: npm run build

      - name: Verify source maps were uploaded to Sentry
        run: |
          echo "## Source Map Upload Verification" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if JS files contain Sentry debug IDs
          if grep -q "_sentryDebugIds" dist/assets/*.js; then
            echo "✅ Debug IDs found in JavaScript bundles" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Warning: Debug IDs not found in JavaScript bundles" >> $GITHUB_STEP_SUMMARY
            echo "This may indicate source maps were not properly uploaded to Sentry" >> $GITHUB_STEP_SUMMARY
          fi

          # Check that source map files were deleted (security)
          if [ -f dist/assets/*.map ]; then
            echo "⚠️ Warning: Source map files still present in dist/" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Source map files properly deleted from bundle" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload database to release
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          # For release events, use the release tag. For manual dispatch, use the ref name.
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
          else
            TAG="${{ github.ref_name }}"
          fi

          # Check if a release exists for this tag
          if gh release view "$TAG" &>/dev/null; then
            echo "Uploading database to release $TAG..."
            gh release upload "$TAG" \
              public/parkhomov.db \
              --clobber
          else
            echo "⚠️  No release found for tag $TAG, skipping database upload"
            echo "The database can be uploaded later using: npm run release:upload-db"
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Sync to S3
        run: aws s3 sync ./dist s3://lenr.academy --delete

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id ET0385Q49O8YX --paths "/*"

      - name: Add deployment summary
        run: |
          if [ "${{ github.event_name }}" = "release" ]; then
            TAG="${{ github.event.release.tag_name }}"
          else
            TAG="${{ github.ref_name }}"
          fi

          echo "## Deployment Successful :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** Production" >> $GITHUB_STEP_SUMMARY
          echo "**Release:** $TAG" >> $GITHUB_STEP_SUMMARY
          echo "**Site:** https://lenr.academy" >> $GITHUB_STEP_SUMMARY
          echo "**Database:** Uploaded to release assets (161MB)" >> $GITHUB_STEP_SUMMARY
          echo "**Deployed at:** $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY

  update-database:
    name: Update Database Bucket (if version changed)
    runs-on: ubuntu-latest
    needs: deploy  # Run after deploy succeeds

    # Same conditions as deploy job - only for latest releases or manual dispatch
    if: |
      (github.event_name == 'release' &&
       github.event.release.prerelease == false) ||
      github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name || github.ref }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check database version
        id: check_version
        run: |
          # Get local version from metadata file
          LOCAL_VERSION=$(jq -r '.version' public/parkhomov.db.meta.json)
          echo "Local database version: $LOCAL_VERSION"

          # Fetch remote version directly from S3 (bypass CloudFront cache)
          # Note: Use path-style URL because bucket name contains dots
          REMOTE_VERSION=$(curl -sf https://s3.amazonaws.com/db.lenr.academy/latest/parkhomov.db.meta.json | jq -r '.version' 2>/dev/null || echo "none")
          echo "Remote database version: $REMOTE_VERSION"

          # Compare versions
          if [ "$LOCAL_VERSION" != "$REMOTE_VERSION" ]; then
            echo "✅ Database version changed: $REMOTE_VERSION -> $LOCAL_VERSION"
            echo "db_changed=true" >> $GITHUB_OUTPUT
            echo "local_version=$LOCAL_VERSION" >> $GITHUB_OUTPUT
          else
            echo "⏭️  Database version unchanged: $LOCAL_VERSION"
            echo "db_changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Configure AWS credentials
        if: steps.check_version.outputs.db_changed == 'true'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload database to S3 bucket
        if: steps.check_version.outputs.db_changed == 'true'
        run: |
          VERSION="${{ steps.check_version.outputs.local_version }}"
          echo "📦 Uploading database version $VERSION to S3..."
          npm run db:upload --version="$VERSION"

      - name: Invalidate CloudFront cache for database bucket
        if: steps.check_version.outputs.db_changed == 'true'
        run: |
          echo "🔄 Invalidating CloudFront cache for db.lenr.academy..."
          aws cloudfront create-invalidation --distribution-id E2HHYQ6QJH13V0 --paths "/*"

      - name: Add database update summary
        run: |
          echo "## Database Bucket Update 🗄️" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ steps.check_version.outputs.db_changed }}" = "true" ]; then
            VERSION="${{ steps.check_version.outputs.local_version }}"
            echo "✅ **Database updated to version:** $VERSION" >> $GITHUB_STEP_SUMMARY
            echo "**Database URL:** https://db.lenr.academy/$VERSION/parkhomov.db" >> $GITHUB_STEP_SUMMARY
            echo "**Latest URL:** https://db.lenr.academy/latest/parkhomov.db" >> $GITHUB_STEP_SUMMARY
            echo "**Index:** https://db.lenr.academy/index.html" >> $GITHUB_STEP_SUMMARY
          else
            echo "⏭️ **Database version unchanged** - skipped upload" >> $GITHUB_STEP_SUMMARY
          fi
