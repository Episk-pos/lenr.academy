/**
 * GitHub error reporting utilities
 * Generates URLs and formatted reports for GitHub issue integration
 */

import type { ErrorContext } from './errorContext';

const REPO_OWNER = 'Episk-pos';
const REPO_NAME = 'lenr.academy';
const REPO_URL = `https://github.com/${REPO_OWNER}/${REPO_NAME}`;

/**
 * Generate GitHub issue search URL
 * Searches for issues with the bug label and error fingerprint
 *
 * @param errorContext - The error context containing fingerprint and message
 * @returns URL to GitHub issue search results
 */
export function getGitHubSearchUrl(errorContext: ErrorContext): string {
  const { fingerprint, error } = errorContext;

  // Use first 60 characters of error message as search term
  const searchTerm = error.message.substring(0, 60);

  // Build search query: label filter + error message + fingerprint
  const query = `is:issue label:bug ${searchTerm} fingerprint:${fingerprint}`;

  return `${REPO_URL}/issues?q=${encodeURIComponent(query)}`;
}

/**
 * Generate GitHub new issue URL with pre-filled title and labels
 * Note: YAML issue templates have limited URL pre-filling support
 * Only title and labels work reliably
 *
 * @param errorContext - The error context
 * @returns URL to create a new GitHub issue
 */
export function getGitHubNewIssueUrl(errorContext: ErrorContext): string {
  const { error, fingerprint } = errorContext;

  // Create title with error fingerprint for easy searching
  const title = `[Bug] ${error.name}: ${error.message.substring(0, 80)} [fp:${fingerprint}]`;

  // Use error_report.yml template and pre-fill title
  const params = new URLSearchParams({
    template: 'error_report.yml',
    title,
    labels: 'bug,needs-triage,automated-report',
  });

  return `${REPO_URL}/issues/new?${params.toString()}`;
}

/**
 * Format error context as markdown for clipboard
 * This will be copied to clipboard so users can paste it into the GitHub issue form
 *
 * @param errorContext - The complete error context
 * @returns Formatted markdown string ready for pasting into GitHub
 */
export function formatErrorReportForClipboard(errorContext: ErrorContext): string {
  const {
    error,
    fingerprint,
    timestamp,
    url,
    browser,
    browserVersion,
    os,
    device,
    appVersion,
    stackTrace,
  } = errorContext;

  return `## Automated Error Report

**Error Fingerprint:** \`${fingerprint}\`

### Error Details

**Error Type:** ${error.name}

**Error Message:**
\`\`\`
${error.message}
\`\`\`

**Stack Trace:**
\`\`\`
${stackTrace}
\`\`\`

### Environment

- **Browser:** ${browser} ${browserVersion}
- **OS:** ${os}
- **Device:** ${device}
- **App Version:** ${appVersion}
- **URL:** ${url}
- **Timestamp:** ${timestamp}

### Steps to Reproduce

<!-- ⚠️ REQUIRED: Replace the placeholder steps below with the EXACT steps you took that led to this error -->
<!-- Without detailed reproduction steps, developers cannot reliably fix this issue -->

1. Go to '...'
2. Click on '...'
3. See error

### Expected Behavior

<!-- ⚠️ REQUIRED: Describe what you expected to happen -->
<!-- Example: "The page should load the fusion query results" -->

[FILL THIS IN]

### Actual Behavior

<!-- ⚠️ REQUIRED: Describe what actually happened instead -->
<!-- Example: "The page showed an error message and did not load results" -->

[FILL THIS IN]

---

*This error report was automatically generated by LENR Academy's error reporting system.*
*Please search for existing issues with fingerprint \`${fingerprint}\` before submitting.*

**⚠️ REMINDER: Before submitting this issue, ensure you have filled in all three sections above (Steps to Reproduce, Expected Behavior, Actual Behavior). These details are critical for developers to fix the issue quickly.**
`;
}

/**
 * Copy formatted error report to clipboard
 * Uses the modern Clipboard API with fallback
 *
 * @param errorContext - The error context to format and copy
 * @returns Promise that resolves when text is copied
 */
export async function copyErrorReportToClipboard(errorContext: ErrorContext): Promise<void> {
  const formattedReport = formatErrorReportForClipboard(errorContext);

  try {
    // Modern Clipboard API
    await navigator.clipboard.writeText(formattedReport);
  } catch (err) {
    // Fallback for older browsers
    const textarea = document.createElement('textarea');
    textarea.value = formattedReport;
    textarea.style.position = 'fixed';
    textarea.style.opacity = '0';
    document.body.appendChild(textarea);
    textarea.select();

    try {
      document.execCommand('copy');
    } finally {
      document.body.removeChild(textarea);
    }
  }
}
